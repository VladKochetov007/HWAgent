# Application messages configuration
# All user-facing messages for the HWAgent application

# Tool Manager messages
tool_manager:
  no_tools_found_warning: "Warning: No tools found in {config_path}."
  tool_load_error: "Error loading tools from {config_path}: {error}"
  tool_not_found_error: "Error: Tool '{tool_name}' not found."
  tool_execution_not_implemented_error: "Error: Tool '{tool_name}' execution not implemented."
  tool_registered_success: "Registered tool: {tool_name}"
  tool_registration_failed: "Warning: Failed to register tool {tool_class}: {error}"
  no_tools_registered_error: "No tools were successfully registered"
  tool_initialization_failed: "Failed to initialize tools"
  tool_module_import_warning: "Warning: Could not import tool module '{module_name}': {error}"
  tool_loading_error: "Warning: Error loading tool from '{module_name}': {error}"
  
  # Tool-specific messages
  create_file:
    filepath_required_error: "Error: 'filepath' (string) parameter is required for create_file."
    content_required_error: "Error: 'content' (string) parameter is required for create_file."
    invalid_filepath_error: "Error: Invalid filepath '{filepath}'. Must be a relative path without '..'."
    file_creation_success: "Successfully created file: {filepath}"
    file_creation_error: "Error creating file '{filepath}': {error}"

# ReAct Agent messages
react_agent:
  # Streaming and response handling
  streaming_enabled: "Streaming enabled."
  streaming_disabled: "Streaming disabled."
  streaming_status: "Streaming is currently {status}."
  streaming_usage_help: "Usage: /stream on or /stream off"
  
  # Context management
  context_cleared: "Conversation context cleared."
  no_conversation_history: "No conversation history (only system prompt)."
  context_summary: "Context: {user_messages} user messages, {assistant_messages} assistant messages, {tool_messages} tool results."
  
  # Processing messages
  iteration_header: "--- Agent Iteration {iteration} ---"
  bot_prefix: "Bot: "
  llm_raw_output_header: "LLM Raw Output (text part):"
  llm_tool_calls_header: "LLM Tool Calls (structured): {tool_calls}"
  thought_header: "THOUGHT: {thought}"
  plan_header: "PLAN: {plan}"
  final_answer_header: "FINAL_ANSWER: {final_answer}"
  executing_tool_call: "Executing API Tool Call: ID={tool_call_id}, Name={tool_name}, Args='{args}'"
  raw_tool_output: "Raw TOOL_OUTPUT from manager: {output}"
  formatted_tool_output: "Formatted TOOL_OUTPUT for history: {output}"
  
  # Error messages
  failed_to_get_model_response_error: "Error: Failed to get a message object from the model response."
  failed_to_parse_tool_args_error: "[System Error: Failed to parse JSON arguments for tool {tool_name}. Error: {error}. Args: {args}]"
  tool_args_decode_error: "Error decoding tool arguments JSON: {error}"
  
  # Warning messages
  text_tool_call_warning: "Warning: LLM provided text-based TOOL_CALL (Name: {tool_name}) but no structured tool_call object. This tool call cannot be executed correctly without a tool_call_id from the API."
  text_tool_call_system_note: "[System Note: You specified a TOOL_CALL in text ('{tool_name}') but did not use the structured tool calling mechanism. I cannot execute this without a tool_call_id from the API. Please try again using the correct tool format if a tool is needed, or provide a FINAL_ANSWER.]"
  
  # Response handling
  model_empty_response_note: "Bot: Model response was empty or did not provide a clear next action."
  model_empty_response_system_note: "[System Note: Model response was empty or unparseable for action.]"
  bot_text_but_no_action_note: "Bot: Model provided text but no actionable command (tool call or final answer) this turn. Continuing with text in history."
  max_iterations_reached_message: "Bot: Reached maximum iterations without a final answer."
  early_termination_message: "Bot: Terminating early due to consecutive empty responses."
  error_termination_message: "Bot: Terminating due to consecutive errors. Please try rephrasing your request."
  agent_processing_error: "Error during agent processing: {error}"
  
  # Repetitive request handling
  repetitive_request_detected: "I notice I've been asking the same question repeatedly. Let me try to proceed with the available context."
  intelligent_file_creation: "Based on our conversation, I'm creating a file with the content I found."
  context_based_action: "Using context from our conversation to take action."
  
  # Tool call error handling and recovery
  malformed_tool_call_feedback: "[System Feedback: You attempted to use tool '{tool_name}' but the format was incorrect. Tool calls must use the structured API format, not text format. Please use the proper tool calling mechanism or provide a FINAL_ANSWER if no tool is needed.]"
  function_parts_error_recovery: "[System Error Recovery: There was a mismatch in function call/response parts. Please ensure you're using the correct tool call format with proper JSON structure. Try again with a properly formatted tool call or provide a FINAL_ANSWER.]"
  tool_call_error_recovery: "[System Error Recovery: Tool call failed. Please check your tool call format and parameters. Ensure JSON is properly formatted. You can try again or provide a FINAL_ANSWER if the task can be completed without tools.]"
  
  # Parser messages
  parser:
    tool_call_missing_name_warning: "[System Error: TOOL_CALL JSON parsed, but 'tool_name' is missing.]"
    tool_call_json_decode_error_warning: "Found TOOL_CALL marker but failed to decode JSON content. Error: {error}. Attempted segment (approx): '{segment}...' "
    tool_call_no_brace_warning: "Found TOOL_CALL: marker but no subsequent JSON object opening brace '{' was found."

# Main script messages
main:
  config_load_fail_error: "Failed to load initial configurations. Exiting."
  api_config_missing_error: "Error: 'base_url' or 'model' not found in api.yaml under 'openrouter'."
  api_key_missing_error: "Error: Environment variable OPENROUTER_API_KEY not set."
  api_key_missing_instruction: "Please set it before running the bot: export OPENROUTER_API_KEY='your_api_key'"
  tool_manager_init_warning: "Warning: ToolManager initialized but no tools were loaded. Tool functionality will be limited."
  client_agent_init_error: "Error initializing OpenAI client or Agent: {error}"
  chatbot_started_message: "ReAct Chatbot started! Type 'exit' to quit."
  base_prompt_display: "Base system prompt being used by agent: {prompt_snippet}..."
  chatbot_shutdown_message: "Chatbot shutting down. Goodbye!"
  
  # Command help
  special_commands_header: "Special commands:"
  command_clear: "  /clear - Clear conversation context"
  command_context: "  /context - Show context summary"  
  command_stream: "  /stream on/off - Enable/disable streaming"
  command_exit: "  /exit or 'exit' - Exit the chatbot"

# Configuration and initialization messages
config:
  yaml_file_not_found: "Error: YAML configuration file {config_path} not found."
  yaml_parse_error: "Error reading YAML configuration from {config_path}: {error}"
  json_file_not_found: "Error: JSON configuration file {config_path} not found."
  json_parse_error: "Error reading JSON configuration from {config_path}: {error}" 